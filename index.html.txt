<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>MTG Pseudo-Draft</title>
  <style>
    body { font-family: sans-serif; background: #f4f4f4; padding: 20px; }
    .card, .setup, .picked-card { background: white; padding: 10px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .card img, .picked-card img { max-width: 100%; height: auto; border-radius: 4px; }
    button, select { margin-top: 10px; padding: 5px 10px; border: none; background: #2e7d32; color: white; border-radius: 4px; cursor: pointer; }
    button:hover, select:hover { background: #1b5e20; }
    #cards, #draft-screen, #picked-screen { display: none; }
    .error { color: red; font-weight: bold; }
  </style>
</head>
<body>
  <div id="setup-screen" class="setup">
    <h1>MTG Pseudo-Draft Setup</h1>
    <label for="color">Choose Color Identity:</label><br>
    <select id="color" multiple size="6">
      <option value="w">White</option>
      <option value="u">Blue</option>
      <option value="b">Black</option>
      <option value="r">Red</option>
      <option value="g">Green</option>
      <option value="c">Colorless</option>
    </select><br>

    <label for="rarity">Choose Rarity:</label><br>
    <select id="rarity">
      <option value="common">Common</option>
      <option value="uncommon">Uncommon</option>
      <option value="rare">Rare</option>
      <option value="mythic">Mythic</option>
    </select><br>

    <button onclick="startDraft()">Start Draft</button>
  </div>

  <div id="draft-screen">
    <h1>Draft Your Card</h1>
    <p id="criteria-description"></p>
    <div id="cards"></div>
    <p id="error-message" class="error"></p>
    <div>
      <button onclick="restartDraft()">Get New Cards</button>
      <button onclick="goBack()">Change Selections</button>
      <button onclick="showPicked()">View Picked Cards</button>
    </div>
  </div>

  <div id="picked-screen">
    <h1>Your Picked Cards</h1>
    <div id="picked-cards"></div>
    <button onclick="returnToDraft()">Back to Draft</button>
  </div>

  <script>
    const PICK_SIZE = 5; // Define the number of cards to fetch
    
    const setupScreen = document.getElementById('setup-screen');
    const draftScreen = document.getElementById('draft-screen');
    const pickedScreen = document.getElementById('picked-screen');
    const cardsContainer = document.getElementById('cards');
    const pickedCardsContainer = document.getElementById('picked-cards');
    const criteriaDesc = document.getElementById('criteria-description');
    const errorMessage = document.getElementById('error-message');
    const fetchedNames = new Set();
    const pickedCards = [];

    function getSelectedColors() {
      return Array.from(document.getElementById('color').selectedOptions).map(o => o.value);
    }

    function buildQuery(colors, rarity) {
      let colorQuery = '';
      if (colors.length > 0) {
        if (colors.includes('c') && colors.length === 1) {
          colorQuery = 'coloridentity=c';
        } else {
          const identity = colors.filter(c => c !== 'c').map(c => c.toUpperCase()).sort().join('');
          colorQuery = `commander:${identity}`;
        }
      }

      const exclusions = '-is:funny -type:land -is:token -is:rebalanced -is:promo -is:custom -is:memorabilia -is:universesbeyond -set:dft -set:dsk -t:scheme -t:plane -t:phenomenon -t:vanguard -t:conspiracy game:paper legal:vintage';
      return `${colorQuery} -type:creature rarity=${rarity} ${exclusions}`.trim();
    }

    async function fetchRandomCard(query, retries = 10) {
      for (let attempt = 0; attempt < retries; attempt++) {
        try {
          const res = await fetch(`https://api.scryfall.com/cards/random?q=${encodeURIComponent(query)}`);
          if (!res.ok) continue;
          const data = await res.json();
          if (!fetchedNames.has(data.name)) {
            fetchedNames.add(data.name);
            return data;
          }
        } catch (e) {
          console.error('Fetch error:', e);
        }
      }
      return null;
    }

    async function loadCards(query) {
      cardsContainer.innerHTML = '';
      errorMessage.textContent = '';
      fetchedNames.clear();
      const cards = [];

      for (let i = 0; i < 5; i++) {
        const card = await fetchRandomCard(query);
        if (card) {
          cards.push(card);
        }
      }

      if (cards.length === 0) {
        errorMessage.textContent = 'No cards could be found for this filter. Try relaxing your criteria.';
        return;
      }

      cards.forEach(card => {
        const cardDiv = document.createElement('div');
        cardDiv.className = 'card';
        const imageUrl = card.image_uris?.normal || card.card_faces?.[0]?.image_uris?.normal || '';
        cardDiv.innerHTML = `
          <h2>${card.name}</h2>
          <p><em>${card.type_line}</em></p>
          <img src="${imageUrl}" alt="${card.name}" />
          <p>${card.oracle_text || ''}</p>
        `;
        const pickButton = document.createElement('button');
        pickButton.textContent = 'Pick This Card';
        pickButton.addEventListener('click', () => pickCard(card));
        cardDiv.appendChild(pickButton);
        cardsContainer.appendChild(cardDiv);
      });

      cardsContainer.style.display = 'block';
    }

    function pickCard(card) {
      pickedCards.push(card);
      restartDraft();
    }

    function showPicked() {
      pickedCardsContainer.innerHTML = '';
      pickedCards.forEach(card => {
        const cardDiv = document.createElement('div');
        cardDiv.className = 'picked-card';
        const imageUrl = card.image_uris?.normal || card.card_faces?.[0]?.image_uris?.normal || '';
        cardDiv.innerHTML = `
          <h2>${card.name}</h2>
          <p><em>${card.type_line}</em></p>
          <img src="${imageUrl}" alt="${card.name}" />
          <p>${card.oracle_text || ''}</p>
        `;
        pickedCardsContainer.appendChild(cardDiv);
      });
      draftScreen.style.display = 'none';
      pickedScreen.style.display = 'block';
    }

    function returnToDraft() {
      pickedScreen.style.display = 'none';
      draftScreen.style.display = 'block';
    }

    function startDraft() {
      const selectedColors = getSelectedColors();
      const rarity = document.getElementById('rarity').value;
      const colorNames = { w: 'White', u: 'Blue', b: 'Black', r: 'Red', g: 'Green', c: 'Colorless' };
      const desc = selectedColors.length
        ? `Color Identity: ${selectedColors.map(c => colorNames[c] || c).join(', ')}, Rarity: ${rarity}`
        : `Color Identity: Any, Rarity: ${rarity}`;

      const query = buildQuery(selectedColors, rarity);
      criteriaDesc.textContent = desc;

      setupScreen.style.display = 'none';
      draftScreen.style.display = 'block';
      loadCards(query);
    }

    function restartDraft() {
      const selectedColors = getSelectedColors();
      const rarity = document.getElementById('rarity').value;
      const query = buildQuery(selectedColors, rarity);
      loadCards(query);
    }

    function goBack() {
      draftScreen.style.display = 'none';
      setupScreen.style.display = 'block';
    }

    window.onload = () => {
      setupScreen.style.display = 'block';
      draftScreen.style.display = 'none';
      pickedScreen.style.display = 'none';
    };
  </script>
</body>
</html>
